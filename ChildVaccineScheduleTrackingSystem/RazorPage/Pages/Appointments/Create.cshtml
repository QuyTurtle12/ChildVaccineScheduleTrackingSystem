@page
@model RazorPage.Pages.Appointments.CreateModel
@{
    ViewData["Title"] = "Book an Appointment";
}

<form method="post" id="createAppointmentForm">

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger d-none" id="errorMessages">
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <p>@error.ErrorMessage</p>
            }
        </div>
    }
@* <div id="errorMessages" class="alert alert-danger d-none"></div> *@


    <input type="hidden" asp-for="Appointment.UserId" />
    @* <input type="hidden" asp-for="Appointment.PackageId" id="selectedPackageId" /> *@
    <input type="hidden" asp-for="Appointment.PackageIds" id="selectedPackageIds" />


    @if (Model.UserRole == "Staff")
    {
        <div class="mb-3">
            <label for="customerPhone" class="form-label">Số điện thoại khách hàng</label>
            <input type="text" id="customerPhone" asp-for="Appointment.CustomerPhoneNumber" class="form-control" placeholder="Nhập số điện thoại" />
            <span asp-validation-for="Appointment.CustomerPhoneNumber" class="text-danger"></span>
        </div>
    }


    <div class="form-group">
        <label asp-for="Appointment.AppointmentDate">Ngày hẹn</label>
        <input asp-for="Appointment.AppointmentDate" class="form-control" type="datetime-local"/>
        <span asp-validation-for="Appointment.AppointmentDate" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Appointment.Name">Tên cuộc hẹn</label>
        <input asp-for="Appointment.Name" class="form-control"></input>
    </div>
    <div class="form-group" style="display: none">
        <label asp-for="Appointment.PaymentName">Tên thanh toán</label>
        <input asp-for="Appointment.PaymentName" class="form-control" value="Cash"></input>
    </div>

    <!-- Package Selection -->
    <div class="form-group">
        <label>Chọn gói</label>
        <ul class="list-group">
            @foreach (var package in Model.Packages)
            {
                <div>
                    <input type="checkbox" name="Appointment.PackageIds" value="@package.Id" />
                    <label>@package.Name</label>
                </div>
                
            }
        </ul>
        <input type="hidden" asp-for="Appointment.PackageIds" id="selectedPackageIds" />
        <span asp-validation-for="Appointment.PackageIds" class="text-danger"></span>
    </div>


    <div class="form-group" style="display: none">
        <label>Selected Package ID</label>
        <input id="packageInput" class="form-control" disabled />
    </div>

    <div class="form-group" style="display: none">
        <label asp-for="Appointment.Status">Status</label>
        <input asp-for="Appointment.Status" class="form-control" value="0" />
    </div>
    <div class="mt-2">
        <button type="submit" class="btn btn-success">Đặt lịch</button>
        <a class="btn btn-secondary" asp-page="./Index">Quay lại danh sách</a>
    </div>
</form>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const form = document.getElementById("createAppointmentForm");
            const customerPhoneInput = document.getElementById("customerPhone");
            const errorMessagesDiv = document.getElementById("errorMessages");

            if (!errorMessagesDiv) {
                console.error("Error: The div with id 'errorMessages' is missing.");
                return;
            }

            form.addEventListener("submit", function (event) {
                errorMessagesDiv.innerHTML = "";
                errorMessagesDiv.classList.add("d-none"); // Hide error messages by default

                let errors = [];

                // Check if Staff role and phone number is empty
                if ('@Model.UserRole' === 'Staff' && customerPhoneInput.value.trim() === "") {
                    errors.push("Customer phone number is required for booking.");
                }

                // If errors exist, prevent form submission and display errors
                if (errors.length > 0) {
                    event.preventDefault();
                    errorMessagesDiv.innerHTML = errors.join("<br>");
                    errorMessagesDiv.classList.remove("d-none");
                }
            });
        });


        // document.addEventListener("DOMContentLoaded", function () {
        //     const packageOptions = document.querySelectorAll(".package-option");
        //     const packageIdInput = document.getElementById("selectedPackageId"); // Correct ID
        //     const packageDisplayInput = document.getElementById("packageInput"); // Show selected ID

        //     packageOptions.forEach(option => {
        //         option.addEventListener("click", function () {
        //             const selectedPackageId = this.getAttribute("data-package-id");
        //             packageIdInput.value = selectedPackageId; // Set hidden field
        //             packageDisplayInput.value = selectedPackageId; // Show in disabled input

        //             packageOptions.forEach(opt => opt.classList.remove("active")); // Remove highlight
        //             this.classList.add("active"); // Highlight selected package
        //         });
        //     });
        // });

        document.addEventListener("DOMContentLoaded", function () {
            const checkboxes = document.querySelectorAll(".package-checkbox");
            // const packageIdInput = document.getElementById("selectedPackageIds");
            const hiddenInput = document.getElementById("selectedPackageIds");


            // checkboxes.forEach(checkbox => {
            //     checkbox.addEventListener("change", function () {
            //         const selectedIds = Array.from(document.querySelectorAll(".package-checkbox:checked"))
            //             .map(cb => cb.value);
            //         packageIdInput.value = JSON.stringify(selectedIds); // Store as JSON string
            //         console.log("Selected Package IDs:", packageIdInput.value);
            //     });
            // });
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener("change", function () {
                    let selectedValues = Array.from(checkboxes)
                        .filter(c => c.checked)
                        .map(c => c.value);

                    hiddenInput.value = JSON.stringify(selectedValues); // Store as JSON array
                });
            });
        });



    </script>
}

